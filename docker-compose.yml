

services:
  # nginx:
  #   container_name: nginx
  #   image: nginx:latest
  #   restart: unless-stopped
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - form-service
  #     - auth-service
  #   networks:
  #     - form-network
  #     - auth-network
  #
  api-gateway:
    container_name: api-gateway
    restart: unless-stopped
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    x-develop:
      watch:
        - action: rebuild
          path: ./services/api-gateway/
    expose:
      - "80"
    ports:
      - "3000:80"
    networks:
      - form-network
      - auth-network
      - plugin-manager-network
    depends_on:
      - form-service
      - auth-service
      - plugin-manager-service
    cpus: '0.25'

  form-service:
    container_name: form-service
    restart: unless-stopped
    labels:
      co.elastic.logs/enabled: true
    build:
      context: ./services/form-service
      dockerfile: Dockerfile
    x-develop:
      watch:
        - action: rebuild
          path: ./services/form-service/
    expose:
      - "80"
    depends_on:
      form-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: form-db
      DB_PORT: 5432
      DB_USER: form_service_man
      DB_PASSWORD: form_service_man
      DB_NAME: form_service_database
      DB_SSLMODE: disable
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    env_file:
      - .env
    networks:
      - form-network
    cpus: '0.25'

  form-db:
    image: postgres:latest
    container_name: form-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: form_service_man
      POSTGRES_PASSWORD: form_service_man
      POSTGRES_DB: form_service_database
    volumes:
      - ./database/form:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - form-network
    cpus: '0.25'

  auth-service:
    container_name: auth-service
    restart: unless-stopped
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    x-develop:
      watch:
        - action: rebuild
          path: ./services/auth-service/
    expose:
      - "80"
    depends_on:
      auth-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: auth-db
      DB_PORT: 5432
      DB_USER: auth_service_man
      DB_PASSWORD: auth_service_man
      DB_NAME: auth_service_database
      DB_SSLMODE: disable
      JWT_SECRET: hAnjwHeNT2kpQmY8I46
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    networks:
      - auth-network
    cpus: '0.25'

  auth-db:
    image: postgres:latest
    container_name: auth-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: auth_service_man
      POSTGRES_PASSWORD: auth_service_man
      POSTGRES_DB: auth_service_database
    volumes:
      - ./database/auth:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - auth-network
    cpus: '0.25'

  plugin-manager-service:
    container_name: plugin-manager-service
    restart: unless-stopped
    build:
      context: ./services/plugin-manager-service
      dockerfile: Dockerfile
    x-develop:
      watch:
        - action: rebuild
          path: ./services/plugin-manager-service/
    expose:
      - "80"
    depends_on:
      plugin-manager-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: plugin-manager-db
      DB_PORT: 5432
      DB_USER: plugin_manager_service_man
      DB_PASSWORD: plugin_manager_service_man
      DB_NAME: plugin_manager_service_database
      DB_SSLMODE: disable
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    networks:
      - plugin-manager-network
    cpus: '0.25'

  plugin-manager-db:
    image: postgres:latest
    container_name: plugin-manager-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 1s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_USER: plugin_manager_service_man
      POSTGRES_PASSWORD: plugin_manager_service_man
      POSTGRES_DB: plugin_manager_service_database
    volumes:
      - ./database/plugin-manager:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - plugin-manager-network
    cpus: '0.25'

  google-sheets-service:
    container_name: google-sheets-service
    restart: unless-stopped
    build:
      context: ./services/plugins/google-sheets-service
      dockerfile: Dockerfile
    x-develop:
      watch:
        - action: rebuild
          path: ./services/plugins/google-sheets-service/
    expose:
      - "80"
    depends_on:
      - plugin-manager-service
      - form-service
    networks:
      - google-sheets-network
      - plugin-manager-network
      - form-network
    cpus: '0.25'

  sms-service:
    container_name: sms-service
    restart: unless-stopped
    build:
      context: ./services/plugins/sms-service
      dockerfile: Dockerfile
    x-develop:
      watch:
        - action: rebuild
          path: ./services/plugins/sms-service/
    environment:
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      TWILIO_PHONE_NUMBER: "+13344228645"
      TWILIO_AUTH_TOKEN: "ff420a510c3966752bf64009c67d7ab9"
      TWILIO_ACCOUNT_SID: "AC6ddfca6c50e191d8afcc4f5d73a3406a"
    expose:
      - "80"
    depends_on:
      - plugin-manager-service
      - form-service
      - auth-service
    networks:
      - sms-network
      - plugin-manager-network
      - auth-network
    cpus: '0.25'

  rabbitmq:
    container_name: "rabbitmq"
    image: "rabbitmq:3-management-alpine"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 5s
      retries: 10
    expose:
      - "5672"
    ports:
      - "15672:15672"
    environment:
      RABBITMQ_ERLANG_COOKIE: rabbitmq.cookie
    volumes:
        - ./rabbitmq:/var/lib/rabbitmq
    networks:
      - auth-network
      - form-network
      - plugin-manager-network
      - sms-network
    # cpus: '0.5' # makes it not work

networks:
  form-network:
    driver: bridge
  auth-network:
    driver: bridge
  plugin-manager-network:
    driver: bridge
  google-sheets-network:
    driver: bridge
  sms-network:
    driver: bridge

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.6.1
  #   container_name: elasticsearch
  #   volumes:
  #     - ./elasticsearch:/usr/share/elasticsearch/data
  #   environment:
  #     discovery.type: single-node
  #     xpack.security.enabled: false
  #   ports:
  #     - 9200:9200
  #     - 9300:9300
  #   restart: unless-stopped
  #   labels:
  #     co.elastic.logs/enabled: false
  #   cpus: '0.25'
  #
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.6.1
  #   container_name: kibana
  #   environment:
  #     ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
  #   ports:
  #     - 5601:5601
  #   depends_on:
  #     - elasticsearch
  #   restart: unless-stopped
  #   labels:
  #     co.elastic.logs/enabled: false
  #   cpus: '0.25'
  #
  # logstash:
  #   image: docker.elastic.co/logstash/logstash:8.6.1
  #   container_name: logstash
  #   volumes:
  #     - ./services/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
  #   ports:
  #     - 5044:5044/tcp
  #   depends_on:
  #     - elasticsearch
  #   restart: unless-stopped
  #   labels:
  #     co.elastic.logs/enabled: false
  #   cpus: '0.25'
  #
  # filebeat:
  #   image: docker.elastic.co/beats/filebeat:8.6.1
  #   container_name: filebeat
  #   user: root
  #   volumes:
  #     - ./services/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   depends_on:
  #     - logstash
  #   command: filebeat -e -strict.perms=false
  #   restart: unless-stopped
  #   cpus: '0.25'
